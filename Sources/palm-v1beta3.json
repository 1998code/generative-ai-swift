{
  "ownerDomain": "google.com",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "description": "The PaLM API allows developers to build generative AI applications using the PaLM model. Large Language Models (LLMs) are a powerful, versatile type of machine learning model that enables computers to comprehend and generate natural language through a series of prompts. The PaLM API is based on Google's next generation LLM, PaLM. It excels at a variety of different tasks like code generation, reasoning, and writing. You can use the PaLM API to build generative AI applications for use cases like content generation, dialogue agents, summarization and classification systems, and more.",
  "baseUrl": "https://generativelanguage.googleapis.com/",
  "rootUrl": "https://generativelanguage.googleapis.com/",
  "ownerName": "Google",
  "protocol": "rest",
  "version": "v1beta3",
  "mtlsRootUrl": "https://generativelanguage.mtls.googleapis.com/",
  "schemas": {
    "CitationSource": {
      "type": "object",
      "properties": {
        "endIndex": {
          "description": "Optional. End of the attributed segment, exclusive.",
          "format": "int32",
          "type": "integer"
        },
        "license": {
          "type": "string",
          "description": "Optional. License for the GitHub project that is attributed as a source for segment. License info is required for code citations."
        },
        "startIndex": {
          "description": "Optional. Start of segment of the response that is attributed to this source. Index indicates the start of the segment, measured in bytes.",
          "type": "integer",
          "format": "int32"
        },
        "uri": {
          "type": "string",
          "description": "Optional. URI that is attributed as a source for a portion of the text."
        }
      },
      "description": "A citation to a source for a portion of a specific response.",
      "id": "CitationSource"
    },
    "GenerateMessageResponse": {
      "type": "object",
      "id": "GenerateMessageResponse",
      "description": "The response from the model. This includes candidate messages and conversation history in the form of chronologically-ordered messages.",
      "properties": {
        "messages": {
          "description": "The conversation history used by the model.",
          "type": "array",
          "items": {
            "$ref": "Message"
          }
        },
        "filters": {
          "type": "array",
          "description": "A set of content filtering metadata for the prompt and response text. This indicates which `SafetyCategory`(s) blocked a candidate from this response, the lowest `HarmProbability` that triggered a block, and the HarmThreshold setting for that category.",
          "items": {
            "$ref": "ContentFilter"
          }
        },
        "candidates": {
          "items": {
            "$ref": "Message"
          },
          "description": "Candidate response messages from the model.",
          "type": "array"
        }
      }
    },
    "CreateTunedModelMetadata": {
      "type": "object",
      "id": "CreateTunedModelMetadata",
      "properties": {
        "totalSteps": {
          "format": "int32",
          "type": "integer",
          "description": "The total number of tuning steps."
        },
        "snapshots": {
          "type": "array",
          "description": "Metrics collected during tuning.",
          "items": {
            "$ref": "TuningSnapshot"
          }
        },
        "completedPercent": {
          "description": "The completed percentage for the tuning operation.",
          "type": "number",
          "format": "float"
        },
        "completedSteps": {
          "type": "integer",
          "description": "The number of steps completed.",
          "format": "int32"
        },
        "tunedModel": {
          "description": "Name of the tuned model associated with the tuning operation.",
          "type": "string"
        }
      },
      "description": "Metadata about the state and progress of creating a tuned model returned from the long-running operation"
    },
    "CountMessageTokensResponse": {
      "description": "A response from `CountMessageTokens`. It returns the model's `token_count` for the `prompt`.",
      "type": "object",
      "id": "CountMessageTokensResponse",
      "properties": {
        "tokenCount": {
          "type": "integer",
          "description": "The number of tokens that the `model` tokenizes the `prompt` into. Always non-negative.",
          "format": "int32"
        }
      }
    },
    "Operation": {
      "properties": {
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "response": {
          "type": "object",
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "metadata": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object"
        }
      },
      "id": "Operation",
      "type": "object",
      "description": "This resource represents a long-running operation that is the result of a network API call."
    },
    "CountMessageTokensRequest": {
      "properties": {
        "prompt": {
          "description": "Required. The prompt, whose token count is to be returned.",
          "$ref": "MessagePrompt"
        }
      },
      "id": "CountMessageTokensRequest",
      "type": "object",
      "description": "Counts the number of tokens in the `prompt` sent to a model. Models may tokenize text differently, so each model may return a different `token_count`."
    },
    "SafetyFeedback": {
      "properties": {
        "setting": {
          "$ref": "SafetySetting",
          "description": "Safety settings applied to the request."
        },
        "rating": {
          "$ref": "SafetyRating",
          "description": "Safety rating evaluated from content."
        }
      },
      "description": "Safety feedback for an entire request. This field is populated if content in the input and/or response is blocked due to safety settings. SafetyFeedback may not exist for every HarmCategory. Each SafetyFeedback will return the safety settings used by the request as well as the lowest HarmProbability that should be allowed in order to return a result.",
      "id": "SafetyFeedback",
      "type": "object"
    },
    "SafetySetting": {
      "description": "Safety setting, affecting the safety-blocking behavior. Passing a safety setting for a category changes the allowed proability that content is blocked.",
      "id": "SafetySetting",
      "type": "object",
      "properties": {
        "threshold": {
          "enum": [
            "HARM_BLOCK_THRESHOLD_UNSPECIFIED",
            "BLOCK_LOW_AND_ABOVE",
            "BLOCK_MEDIUM_AND_ABOVE",
            "BLOCK_ONLY_HIGH",
            "BLOCK_NONE"
          ],
          "description": "Required. Controls the probability threshold at which harm is blocked.",
          "enumDescriptions": [
            "Threshold is unspecified.",
            "Content with NEGLIGIBLE will be allowed.",
            "Content with NEGLIGIBLE and LOW will be allowed.",
            "Content with NEGLIGIBLE, LOW, and MEDIUM will be allowed.",
            "All content will be allowed."
          ],
          "type": "string"
        },
        "category": {
          "description": "Required. The category for this setting.",
          "type": "string",
          "enumDescriptions": [
            "Category is unspecified.",
            "Negative or harmful comments targeting identity and/or protected attribute.",
            "Content that is rude, disrepspectful, or profane.",
            "Describes scenarios depictng violence against an individual or group, or general descriptions of gore.",
            "Contains references to sexual acts or other lewd content.",
            "Promotes unchecked medical advice.",
            "Dangerous content that promotes, facilitates, or encourages harmful acts."
          ],
          "enum": [
            "HARM_CATEGORY_UNSPECIFIED",
            "HARM_CATEGORY_DEROGATORY",
            "HARM_CATEGORY_TOXICITY",
            "HARM_CATEGORY_VIOLENCE",
            "HARM_CATEGORY_SEXUAL",
            "HARM_CATEGORY_MEDICAL",
            "HARM_CATEGORY_DANGEROUS"
          ]
        }
      }
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          }
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "id": "Status"
    },
    "TuningExamples": {
      "properties": {
        "examples": {
          "type": "array",
          "items": {
            "$ref": "TuningExample"
          },
          "description": "Required. The examples. Example input can be for text or discuss, but all examples in a set must be of the same type."
        }
      },
      "description": "A set of tuning examples. Can be training or validatation data.",
      "type": "object",
      "id": "TuningExamples"
    },
    "ListTunedModelsResponse": {
      "description": "Response from `ListTunedModels` containing a paginated list of Models.",
      "properties": {
        "tunedModels": {
          "description": "The returned Models.",
          "items": {
            "$ref": "TunedModel"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no more pages.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ListTunedModelsResponse"
    },
    "CitationMetadata": {
      "properties": {
        "citationSources": {
          "items": {
            "$ref": "CitationSource"
          },
          "type": "array",
          "description": "Citations to sources for a specific response."
        }
      },
      "description": "A collection of source attributions for a piece of content.",
      "id": "CitationMetadata",
      "type": "object"
    },
    "Model": {
      "properties": {
        "temperature": {
          "type": "number",
          "description": "Controls the randomness of the output. Values can range over `[0.0,1.0]`, inclusive. A value closer to `1.0` will produce responses that are more varied, while a value closer to `0.0` will typically result in less surprising responses from the model. This value specifies default to be used by the backend while making the call to the model.",
          "format": "float"
        },
        "displayName": {
          "type": "string",
          "description": "The human-readable name of the model. E.g. \"Chat Bison\". The name can be up to 128 characters long and can consist of any UTF-8 characters."
        },
        "outputTokenLimit": {
          "description": "Maximum number of output tokens available for this model.",
          "type": "integer",
          "format": "int32"
        },
        "baseModelId": {
          "type": "string",
          "description": "Required. The name of the base model, pass this to the generation request. Examples: * `chat-bison`"
        },
        "name": {
          "description": "Required. The resource name of the `Model`. Format: `models/{model}` with a `{model}` naming convention of: * \"{base_model_id}-{version}\" Examples: * `models/chat-bison-001`",
          "type": "string"
        },
        "inputTokenLimit": {
          "format": "int32",
          "description": "Maximum number of input tokens allowed for this model.",
          "type": "integer"
        },
        "description": {
          "type": "string",
          "description": "A short description of the model."
        },
        "version": {
          "type": "string",
          "description": "Required. The version number of the model. This represents the major version"
        },
        "topK": {
          "description": "For Top-k sampling. Top-k sampling considers the set of `top_k` most probable tokens. This value specifies default to be used by the backend while making the call to the model.",
          "type": "integer",
          "format": "int32"
        },
        "topP": {
          "type": "number",
          "description": "For Nucleus sampling. Nucleus sampling considers the smallest set of tokens whose probability sum is at least `top_p`. This value specifies default to be used by the backend while making the call to the model.",
          "format": "float"
        },
        "supportedGenerationMethods": {
          "description": "The model's supported generation methods. The method names are defined as Pascal case strings, such as `generateMessage` which correspond to API methods.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "Model",
      "type": "object",
      "description": "Information about a Generative Language Model."
    },
    "TransferOwnershipRequest": {
      "description": "Request to transfer the ownership of the tuned model.",
      "type": "object",
      "id": "TransferOwnershipRequest",
      "properties": {
        "emailAddress": {
          "description": "Required. The email address of the user to whom the tuned model is being transferred to.",
          "type": "string"
        }
      }
    },
    "Permission": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Output only. The permission name. A unique name will be generated on create. Example: tunedModels/{tuned_model}permssions/{permission} Output only.",
          "readOnly": true
        },
        "granteeType": {
          "enum": [
            "GRANTEE_TYPE_UNSPECIFIED",
            "USER",
            "GROUP",
            "EVERYONE"
          ],
          "description": "Required. Immutable. The type of the grantee.",
          "enumDescriptions": [
            "The default value. This value is unused.",
            "Represents a user. When set, you must provide email_address for the user.",
            "Represents a group. When set, you must provide email_address for the group.",
            "Represents access to everyone. No extra information is required."
          ],
          "type": "string"
        },
        "emailAddress": {
          "type": "string",
          "description": "Optional. Immutable. The email address of the user of group which this permission refers. Field is not set when permission's grantee type is EVERYONE."
        },
        "role": {
          "type": "string",
          "enumDescriptions": [
            "The default value. This value is unused.",
            "Owner can use, update, share and delete the resource.",
            "Writer can use, update and share the resource.",
            "Reader can use the resource."
          ],
          "description": "Required. The role granted by this permission.",
          "enum": [
            "ROLE_UNSPECIFIED",
            "OWNER",
            "WRITER",
            "READER"
          ]
        }
      },
      "type": "object",
      "id": "Permission",
      "description": "Permission resource grants user, group or the rest of the world access to the PaLM API resource (e.g. a tuned model, file). A role is a collection of permitted operations that allows users to perform specific actions on PaLM API resources. To make them available to users, groups, or service accounts, you assign roles. When you assign a role, you grant permissions that the role contains. There are three concentric roles. Each role is a superset of the previous role's permitted operations: - reader can use the resource (e.g. tuned model) for inference - writer has reader's permissions and additionally can edit and share - owner has writer's permissions and additionally can delete"
    },
    "ListModelsResponse": {
      "properties": {
        "models": {
          "items": {
            "$ref": "Model"
          },
          "description": "The returned Models.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no more pages.",
          "type": "string"
        }
      },
      "id": "ListModelsResponse",
      "type": "object",
      "description": "Response from `ListModel` containing a paginated list of Models."
    },
    "CountTextTokensResponse": {
      "type": "object",
      "properties": {
        "tokenCount": {
          "description": "The number of tokens that the `model` tokenizes the `prompt` into. Always non-negative.",
          "format": "int32",
          "type": "integer"
        }
      },
      "description": "A response from `CountTextTokens`. It returns the model's `token_count` for the `prompt`.",
      "id": "CountTextTokensResponse"
    },
    "GenerateTextRequest": {
      "description": "Request to generate a text completion response from the model.",
      "properties": {
        "prompt": {
          "$ref": "TextPrompt",
          "description": "Required. The free-form input text given to the model as a prompt. Given a prompt, the model will generate a TextCompletion response it predicts as the completion of the input text."
        },
        "topP": {
          "format": "float",
          "description": "Optional. The maximum cumulative probability of tokens to consider when sampling. The model uses combined Top-k and nucleus sampling. Tokens are sorted based on their assigned probabilities so that only the most likely tokens are considered. Top-k sampling directly limits the maximum number of tokens to consider, while Nucleus sampling limits number of tokens based on the cumulative probability. Note: The default value varies by model, see the `Model.top_p` attribute of the `Model` returned the `getModel` function.",
          "type": "number"
        },
        "maxOutputTokens": {
          "type": "integer",
          "description": "Optional. The maximum number of tokens to include in a candidate. If unset, this will default to output_token_limit specified in the `Model` specification.",
          "format": "int32"
        },
        "safetySettings": {
          "description": "A list of unique `SafetySetting` instances for blocking unsafe content. that will be enforced on the `GenerateTextRequest.prompt` and `GenerateTextResponse.candidates`. There should not be more than one setting for each `SafetyCategory` type. The API will block any prompts and responses that fail to meet the thresholds set by these settings. This list overrides the default settings for each `SafetyCategory` specified in the safety_settings. If there is no `SafetySetting` for a given `SafetyCategory` provided in the list, the API will use the default safety setting for that category.",
          "items": {
            "$ref": "SafetySetting"
          },
          "type": "array"
        },
        "temperature": {
          "type": "number",
          "format": "float",
          "description": "Optional. Controls the randomness of the output. Note: The default value varies by model, see the `Model.temperature` attribute of the `Model` returned the `getModel` function. Values can range from [0.0,1.0], inclusive. A value closer to 1.0 will produce responses that are more varied and creative, while a value closer to 0.0 will typically result in more straightforward responses from the model."
        },
        "topK": {
          "description": "Optional. The maximum number of tokens to consider when sampling. The model uses combined Top-k and nucleus sampling. Top-k sampling considers the set of `top_k` most probable tokens. Defaults to 40. Note: The default value varies by model, see the `Model.top_k` attribute of the `Model` returned the `getModel` function.",
          "type": "integer",
          "format": "int32"
        },
        "stopSequences": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The set of character sequences (up to 5) that will stop output generation. If specified, the API will stop at the first appearance of a stop sequence. The stop sequence will not be included as part of the response."
        },
        "candidateCount": {
          "type": "integer",
          "description": "Optional. Number of generated responses to return. This value must be between [1, 8], inclusive. If unset, this will default to 1.",
          "format": "int32"
        }
      },
      "id": "GenerateTextRequest",
      "type": "object"
    },
    "Dataset": {
      "description": "Dataset for training or validation.",
      "type": "object",
      "id": "Dataset",
      "properties": {
        "examples": {
          "description": "Optional. Inline examples.",
          "$ref": "TuningExamples"
        }
      }
    },
    "TextPrompt": {
      "description": "Text given to the model as a prompt. The Model will use this TextPrompt to Generate a text completion.",
      "id": "TextPrompt",
      "properties": {
        "text": {
          "type": "string",
          "description": "Required. The prompt text."
        }
      },
      "type": "object"
    },
    "Example": {
      "description": "An input/output example used to instruct the Model. It demonstrates how the model should respond or format its response.",
      "type": "object",
      "id": "Example",
      "properties": {
        "output": {
          "description": "Required. An example of what the model should output given the input.",
          "$ref": "Message"
        },
        "input": {
          "$ref": "Message",
          "description": "Required. An example of an input `Message` from the user."
        }
      }
    },
    "TuningTask": {
      "properties": {
        "startTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The timestamp when tuning this model started.",
          "readOnly": true
        },
        "completeTime": {
          "description": "Output only. The timestamp when tuning this model completed.",
          "type": "string",
          "format": "google-datetime",
          "readOnly": true
        },
        "snapshots": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "TuningSnapshot"
          },
          "description": "Output only. Metrics collected during tuning."
        },
        "trainingData": {
          "description": "Required. Input only. Immutable. The model training data.",
          "$ref": "Dataset"
        },
        "hyperparameters": {
          "$ref": "Hyperparameters",
          "description": "Immutable. Hyperparameters controlling the tuning process. If not provided, default values will be used."
        }
      },
      "id": "TuningTask",
      "description": "Tuning tasks that create tuned models.",
      "type": "object"
    },
    "TuningExample": {
      "id": "TuningExample",
      "properties": {
        "output": {
          "description": "Required. The expected model output.",
          "type": "string"
        },
        "textInput": {
          "description": "Optional. Text model input.",
          "type": "string"
        }
      },
      "description": "A single example for tuning.",
      "type": "object"
    },
    "EmbedTextResponse": {
      "type": "object",
      "description": "The response to a EmbedTextRequest.",
      "id": "EmbedTextResponse",
      "properties": {
        "embedding": {
          "$ref": "Embedding",
          "readOnly": true,
          "description": "Output only. The embedding generated from the input text."
        }
      }
    },
    "TuningSnapshot": {
      "properties": {
        "epoch": {
          "type": "integer",
          "description": "Output only. The epoch this step was part of.",
          "format": "int32",
          "readOnly": true
        },
        "step": {
          "readOnly": true,
          "type": "integer",
          "format": "int32",
          "description": "Output only. The tuning step."
        },
        "meanLoss": {
          "format": "float",
          "type": "number",
          "description": "Output only. The mean loss of the training examples for this step.",
          "readOnly": true
        },
        "computeTime": {
          "readOnly": true,
          "description": "Output only. The timestamp when this metric was computed.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "id": "TuningSnapshot",
      "description": "Record for a single tuning step.",
      "type": "object"
    },
    "Embedding": {
      "properties": {
        "value": {
          "type": "array",
          "description": "The embedding values.",
          "items": {
            "format": "float",
            "type": "number"
          }
        }
      },
      "description": "A list of floats representing the embedding.",
      "type": "object",
      "id": "Embedding"
    },
    "ListPermissionsResponse": {
      "id": "ListPermissionsResponse",
      "properties": {
        "permissions": {
          "items": {
            "$ref": "Permission"
          },
          "description": "Returned permissions.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no more pages.",
          "type": "string"
        }
      },
      "description": "Response from `ListPermissions` containing a paginated list of permissions.",
      "type": "object"
    },
    "BatchEmbedTextResponse": {
      "properties": {
        "embeddings": {
          "description": "Output only. The embeddings generated from the input text.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "Embedding"
          }
        }
      },
      "id": "BatchEmbedTextResponse",
      "type": "object",
      "description": "The response to a EmbedTextRequest."
    },
    "TransferOwnershipResponse": {
      "type": "object",
      "id": "TransferOwnershipResponse",
      "description": "Response from `TransferOwnership`.",
      "properties": {}
    },
    "Message": {
      "description": "The base unit of structured text. A `Message` includes an `author` and the `content` of the `Message`. The `author` is used to tag messages when they are fed to the model as text.",
      "type": "object",
      "id": "Message",
      "properties": {
        "citationMetadata": {
          "$ref": "CitationMetadata",
          "description": "Output only. Citation information for model-generated `content` in this `Message`. If this `Message` was generated as output from the model, this field may be populated with attribution information for any text included in the `content`. This field is used only on output.",
          "readOnly": true
        },
        "author": {
          "description": "Optional. The author of this Message. This serves as a key for tagging the content of this Message when it is fed to the model as text. The author can be any alphanumeric string.",
          "type": "string"
        },
        "content": {
          "type": "string",
          "description": "Required. The text content of the structured `Message`."
        }
      }
    },
    "Empty": {
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "properties": {},
      "id": "Empty"
    },
    "EmbedTextRequest": {
      "type": "object",
      "id": "EmbedTextRequest",
      "properties": {
        "text": {
          "description": "Required. The free-form input text that the model will turn into an embedding.",
          "type": "string"
        }
      },
      "description": "Request to get a text embedding from the model."
    },
    "GenerateMessageRequest": {
      "properties": {
        "topP": {
          "format": "float",
          "description": "Optional. The maximum cumulative probability of tokens to consider when sampling. The model uses combined Top-k and nucleus sampling. Nucleus sampling considers the smallest set of tokens whose probability sum is at least `top_p`.",
          "type": "number"
        },
        "topK": {
          "description": "Optional. The maximum number of tokens to consider when sampling. The model uses combined Top-k and nucleus sampling. Top-k sampling considers the set of `top_k` most probable tokens.",
          "format": "int32",
          "type": "integer"
        },
        "prompt": {
          "description": "Required. The structured textual input given to the model as a prompt. Given a prompt, the model will return what it predicts is the next message in the discussion.",
          "$ref": "MessagePrompt"
        },
        "temperature": {
          "description": "Optional. Controls the randomness of the output. Values can range over `[0.0,1.0]`, inclusive. A value closer to `1.0` will produce responses that are more varied, while a value closer to `0.0` will typically result in less surprising responses from the model.",
          "format": "float",
          "type": "number"
        },
        "candidateCount": {
          "type": "integer",
          "format": "int32",
          "description": "Optional. The number of generated response messages to return. This value must be between `[1, 8]`, inclusive. If unset, this will default to `1`."
        }
      },
      "id": "GenerateMessageRequest",
      "type": "object",
      "description": "Request to generate a message response from the model."
    },
    "GenerateTextResponse": {
      "properties": {
        "safetyFeedback": {
          "description": "Returns any safety feedback related to content filtering.",
          "type": "array",
          "items": {
            "$ref": "SafetyFeedback"
          }
        },
        "filters": {
          "description": "A set of content filtering metadata for the prompt and response text. This indicates which `SafetyCategory`(s) blocked a candidate from this response, the lowest `HarmProbability` that triggered a block, and the HarmThreshold setting for that category. This indicates the smallest change to the `SafetySettings` that would be necessary to unblock at least 1 response. The blocking is configured by the `SafetySettings` in the request (or the default `SafetySettings` of the API).",
          "type": "array",
          "items": {
            "$ref": "ContentFilter"
          }
        },
        "candidates": {
          "description": "Candidate responses from the model.",
          "items": {
            "$ref": "TextCompletion"
          },
          "type": "array"
        }
      },
      "id": "GenerateTextResponse",
      "description": "The response from the model, including candidate completions.",
      "type": "object"
    },
    "TextCompletion": {
      "id": "TextCompletion",
      "description": "Output text returned from a model.",
      "type": "object",
      "properties": {
        "citationMetadata": {
          "readOnly": true,
          "description": "Output only. Citation information for model-generated `output` in this `TextCompletion`. This field may be populated with attribution information for any text included in the `output`.",
          "$ref": "CitationMetadata"
        },
        "output": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The generated text returned from the model."
        },
        "safetyRatings": {
          "description": "Ratings for the safety of a response. There is at most one rating per category.",
          "type": "array",
          "items": {
            "$ref": "SafetyRating"
          }
        }
      }
    },
    "TunedModelSource": {
      "properties": {
        "baseModel": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The name of the base `Model` this `TunedModel` was tuned from. Example: `models/text-bison-001`"
        },
        "tunedModel": {
          "type": "string",
          "description": "Immutable. The name of the `TunedModel` to use as the starting point for training the new model. Example: `tunedModels/my-tuned-model`"
        }
      },
      "description": "Tuned model as a source for training a new model.",
      "type": "object",
      "id": "TunedModelSource"
    },
    "SafetyRating": {
      "properties": {
        "probability": {
          "description": "Required. The probability of harm for this content.",
          "enumDescriptions": [
            "Probability is unspecified.",
            "Content has a negligible chance of being unsafe.",
            "Content has a low chance of being unsafe.",
            "Content has a medium chance of being unsafe.",
            "Content has a high chance of being unsafe."
          ],
          "enum": [
            "HARM_PROBABILITY_UNSPECIFIED",
            "NEGLIGIBLE",
            "LOW",
            "MEDIUM",
            "HIGH"
          ],
          "type": "string"
        },
        "category": {
          "enumDescriptions": [
            "Category is unspecified.",
            "Negative or harmful comments targeting identity and/or protected attribute.",
            "Content that is rude, disrepspectful, or profane.",
            "Describes scenarios depictng violence against an individual or group, or general descriptions of gore.",
            "Contains references to sexual acts or other lewd content.",
            "Promotes unchecked medical advice.",
            "Dangerous content that promotes, facilitates, or encourages harmful acts."
          ],
          "type": "string",
          "enum": [
            "HARM_CATEGORY_UNSPECIFIED",
            "HARM_CATEGORY_DEROGATORY",
            "HARM_CATEGORY_TOXICITY",
            "HARM_CATEGORY_VIOLENCE",
            "HARM_CATEGORY_SEXUAL",
            "HARM_CATEGORY_MEDICAL",
            "HARM_CATEGORY_DANGEROUS"
          ],
          "description": "Required. The category for this rating."
        }
      },
      "type": "object",
      "id": "SafetyRating",
      "description": "Safety rating for a piece of content. The safety rating contains the category of harm and the harm probability level in that category for a piece of content. Content is classified for safety across a number of harm categories and the probability of the harm classification is included here."
    },
    "Hyperparameters": {
      "properties": {
        "epochCount": {
          "type": "integer",
          "format": "int32",
          "description": "Immutable. The number of training epochs. An epoch is one pass through the training data. If not set, a default of 10 will be used."
        },
        "learningRate": {
          "format": "float",
          "description": "Immutable. The learning rate hyperparameter for tuning. If not set, a default of 0.0002 or 0.002 will be calculated based on the number of training examples.",
          "type": "number"
        },
        "batchSize": {
          "description": "Immutable. The batch size hyperparameter for tuning. If not set, a default of 16 or 64 will be used based on the number of training examples.",
          "format": "int32",
          "type": "integer"
        }
      },
      "description": "Hyperparameters controlling the tuning process.",
      "type": "object",
      "id": "Hyperparameters"
    },
    "ContentFilter": {
      "type": "object",
      "properties": {
        "reason": {
          "enum": [
            "BLOCKED_REASON_UNSPECIFIED",
            "SAFETY",
            "OTHER"
          ],
          "description": "The reason content was blocked during request processing.",
          "type": "string",
          "enumDescriptions": [
            "A blocked reason was not specified.",
            "Content was blocked by safety settings.",
            "Content was blocked, but the reason is uncategorized."
          ]
        },
        "message": {
          "description": "A string that describes the filtering behavior in more detail.",
          "type": "string"
        }
      },
      "description": "Content filtering metadata associated with processing a single request. ContentFilter contains a reason and an optional supporting string. The reason may be unspecified.",
      "id": "ContentFilter"
    },
    "MessagePrompt": {
      "type": "object",
      "id": "MessagePrompt",
      "properties": {
        "context": {
          "description": "Optional. Text that should be provided to the model first to ground the response. If not empty, this `context` will be given to the model first before the `examples` and `messages`. When using a `context` be sure to provide it with every request to maintain continuity. This field can be a description of your prompt to the model to help provide context and guide the responses. Examples: \"Translate the phrase from English to French.\" or \"Given a statement, classify the sentiment as happy, sad or neutral.\" Anything included in this field will take precedence over message history if the total input size exceeds the model's `input_token_limit` and the input request is truncated.",
          "type": "string"
        },
        "messages": {
          "items": {
            "$ref": "Message"
          },
          "type": "array",
          "description": "Required. A snapshot of the recent conversation history sorted chronologically. Turns alternate between two authors. If the total input size exceeds the model's `input_token_limit` the input will be truncated: The oldest items will be dropped from `messages`."
        },
        "examples": {
          "items": {
            "$ref": "Example"
          },
          "type": "array",
          "description": "Optional. Examples of what the model should generate. This includes both user input and the response that the model should emulate. These `examples` are treated identically to conversation messages except that they take precedence over the history in `messages`: If the total input size exceeds the model's `input_token_limit` the input will be truncated. Items will be dropped from `messages` before `examples`."
        }
      },
      "description": "All of the structured input text passed to the model as a prompt. A `MessagePrompt` contains a structured set of fields that provide context for the conversation, examples of user input/model output message pairs that prime the model to respond in different ways, and the conversation history or list of messages representing the alternating turns of the conversation between the user and the model."
    },
    "TunedModel": {
      "properties": {
        "topK": {
          "format": "int32",
          "type": "integer",
          "description": "Optional. For Top-k sampling. Top-k sampling considers the set of `top_k` most probable tokens. This value specifies default to be used by the backend while making the call to the model. This value specifies default to be the one used by the base model while creating the model."
        },
        "temperature": {
          "format": "float",
          "type": "number",
          "description": "Optional. Controls the randomness of the output. Values can range over `[0.0,1.0]`, inclusive. A value closer to `1.0` will produce responses that are more varied, while a value closer to `0.0` will typically result in less surprising responses from the model. This value specifies default to be the one used by the base model while creating the model."
        },
        "baseModel": {
          "description": "Immutable. The name of the `Model` to tune. Example: `models/text-bison-001`",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "readOnly": true,
          "description": "Output only. The timestamp when this model was created."
        },
        "state": {
          "type": "string",
          "description": "Output only. The state of the tuned model.",
          "readOnly": true,
          "enumDescriptions": [
            "The default value. This value is unused.",
            "The model is being created.",
            "The model is ready to be used.",
            "The model failed to be created."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "ACTIVE",
            "FAILED"
          ]
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The tuned model name. A unique name will be generated on create. Example: `tunedModels/az2mb0bpw6i` If display_name is set on create, the id portion of the name will be set by concatenating the words of the display_name with hyphens and adding a random portion for uniqueness. Example: display_name = \"Sentence Translator\" name = \"tunedModels/sentence-translator-u3b7m\""
        },
        "description": {
          "type": "string",
          "description": "Optional. A short description of this model."
        },
        "topP": {
          "type": "number",
          "description": "Optional. For Nucleus sampling. Nucleus sampling considers the smallest set of tokens whose probability sum is at least `top_p`. This value specifies default to be the one used by the base model while creating the model.",
          "format": "float"
        },
        "tunedModelSource": {
          "$ref": "TunedModelSource",
          "description": "Optional. TunedModel to use as the starting point for training the new model."
        },
        "updateTime": {
          "type": "string",
          "description": "Output only. The timestamp when this model was updated.",
          "readOnly": true,
          "format": "google-datetime"
        },
        "displayName": {
          "description": "Optional. The name to display for this model in user interfaces. The display name must be up to 40 characters including spaces.",
          "type": "string"
        },
        "tuningTask": {
          "description": "Required. The tuning task that creates the tuned model.",
          "$ref": "TuningTask"
        }
      },
      "description": "A fine-tuned model created using ModelService.CreateTunedModel.",
      "id": "TunedModel",
      "type": "object"
    },
    "BatchEmbedTextRequest": {
      "description": "Batch request to get a text embedding from the model.",
      "properties": {
        "texts": {
          "type": "array",
          "description": "Required. The free-form input texts that the model will turn into an embedding. The current limit is 100 texts, over which an error will be thrown.",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "id": "BatchEmbedTextRequest"
    },
    "CountTextTokensRequest": {
      "id": "CountTextTokensRequest",
      "type": "object",
      "description": "Counts the number of tokens in the `prompt` sent to a model. Models may tokenize text differently, so each model may return a different `token_count`.",
      "properties": {
        "prompt": {
          "description": "Required. The free-form input text given to the model as a prompt.",
          "$ref": "TextPrompt"
        }
      }
    }
  },
  "fullyEncodeReservedExpansion": true,
  "discoveryVersion": "v1",
  "kind": "discovery#restDescription",
  "version_module": true,
  "title": "Generative Language API",
  "canonicalName": "Generative Language",
  "basePath": "",
  "documentationLink": "https://developers.generativeai.google/api",
  "servicePath": "",
  "name": "generativelanguage",
  "parameters": {
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "prettyPrint": {
      "default": "true",
      "location": "query",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks."
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "$.xgafv": {
      "location": "query",
      "type": "string",
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "enum": [
        "1",
        "2"
      ]
    },
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response.",
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query"
    }
  },
  "batchPath": "batch",
  "revision": "20230925",
  "resources": {
    "tunedModels": {
      "resources": {
        "permissions": {
          "methods": {
            "patch": {
              "httpMethod": "PATCH",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "required": true,
                  "pattern": "^tunedModels/[^/]+/permissions/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "description": "Output only. The permission name. A unique name will be generated on create. Example: tunedModels/{tuned_model}permssions/{permission} Output only."
                },
                "updateMask": {
                  "format": "google-fieldmask",
                  "location": "query",
                  "type": "string",
                  "description": "Required. The list of fields to update. Accepted ones: - role (`Permission.role` field)"
                }
              },
              "path": "v1beta3/{+name}",
              "flatPath": "v1beta3/tunedModels/{tunedModelsId}/permissions/{permissionsId}",
              "request": {
                "$ref": "Permission"
              },
              "description": "Updates the permission.",
              "response": {
                "$ref": "Permission"
              },
              "id": "generativelanguage.tunedModels.permissions.patch"
            },
            "delete": {
              "id": "generativelanguage.tunedModels.permissions.delete",
              "httpMethod": "DELETE",
              "description": "Deletes the permission.",
              "parameters": {
                "name": {
                  "pattern": "^tunedModels/[^/]+/permissions/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "description": "Required. The resource name of the permission. Format: `tunedModels/{tuned_model}/permissions/{permission}`",
                  "required": true
                }
              },
              "flatPath": "v1beta3/tunedModels/{tunedModelsId}/permissions/{permissionsId}",
              "response": {
                "$ref": "Empty"
              },
              "parameterOrder": [
                "name"
              ],
              "path": "v1beta3/{+name}"
            },
            "create": {
              "flatPath": "v1beta3/tunedModels/{tunedModelsId}/permissions",
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "POST",
              "path": "v1beta3/{+parent}/permissions",
              "description": "Create a permission to a specific resource.",
              "id": "generativelanguage.tunedModels.permissions.create",
              "request": {
                "$ref": "Permission"
              },
              "response": {
                "$ref": "Permission"
              },
              "parameters": {
                "parent": {
                  "description": "Required. The parent resource of the `Permission`. Format: tunedModels/{tuned_model}",
                  "required": true,
                  "location": "path",
                  "pattern": "^tunedModels/[^/]+$",
                  "type": "string"
                }
              }
            },
            "list": {
              "httpMethod": "GET",
              "description": "Lists permissions for the specific resource.",
              "id": "generativelanguage.tunedModels.permissions.list",
              "parameterOrder": [
                "parent"
              ],
              "flatPath": "v1beta3/tunedModels/{tunedModelsId}/permissions",
              "path": "v1beta3/{+parent}/permissions",
              "response": {
                "$ref": "ListPermissionsResponse"
              },
              "parameters": {
                "pageSize": {
                  "format": "int32",
                  "location": "query",
                  "description": "Optional. The maximum number of `Permission`s to return (per page). The service may return fewer permissions. If unspecified, at most 10 permissions will be returned. This method returns at most 1000 permissions per page, even if you pass larger page_size.",
                  "type": "integer"
                },
                "pageToken": {
                  "description": "Optional. A page token, received from a previous `ListPermissions` call. Provide the `page_token` returned by one request as an argument to the next request to retrieve the next page. When paginating, all other parameters provided to `ListPermissions` must match the call that provided the page token.",
                  "location": "query",
                  "type": "string"
                },
                "parent": {
                  "description": "Required. The parent resource of the permissions. Format: tunedModels/{tuned_model}",
                  "pattern": "^tunedModels/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              }
            },
            "get": {
              "parameters": {
                "name": {
                  "description": "Required. The resource name of the permission. Format: `tunedModels/{tuned_model}permissions/{permission}`",
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "pattern": "^tunedModels/[^/]+/permissions/[^/]+$"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "path": "v1beta3/{+name}",
              "description": "Gets information about a specific Permission.",
              "httpMethod": "GET",
              "id": "generativelanguage.tunedModels.permissions.get",
              "flatPath": "v1beta3/tunedModels/{tunedModelsId}/permissions/{permissionsId}",
              "response": {
                "$ref": "Permission"
              }
            }
          }
        }
      },
      "methods": {
        "create": {
          "response": {
            "$ref": "Operation"
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "TunedModel"
          },
          "flatPath": "v1beta3/tunedModels",
          "parameters": {
            "tunedModelId": {
              "location": "query",
              "type": "string",
              "description": "Optional. The unique id for the tuned model if specified. This value should be up to 40 characters, the first character must be a letter, the last could be a letter or a number. The id must match the regular expression: [a-z]([a-z0-9-]{0,38}[a-z0-9])?."
            }
          },
          "parameterOrder": [],
          "path": "v1beta3/tunedModels",
          "description": "Creates a tuned model. Intermediate tuning progress (if any) is accessed through the [google.longrunning.Operations] service. Status and results can be accessed through the Operations service. Example: GET /v1/tunedModels/az2mb0bpw6i/operations/000-111-222",
          "id": "generativelanguage.tunedModels.create"
        },
        "transferOwnership": {
          "parameters": {
            "name": {
              "description": "Required. The resource name of the tuned model to transfer ownership . Format: `tunedModels/my-model-id`",
              "required": true,
              "type": "string",
              "location": "path",
              "pattern": "^tunedModels/[^/]+$"
            }
          },
          "httpMethod": "POST",
          "flatPath": "v1beta3/tunedModels/{tunedModelsId}:transferOwnership",
          "response": {
            "$ref": "TransferOwnershipResponse"
          },
          "description": "Transfers ownership of the tuned model. This is the only way to change ownership of the tuned model. The current owner will be downgraded to writer role.",
          "path": "v1beta3/{+name}:transferOwnership",
          "parameterOrder": [
            "name"
          ],
          "id": "generativelanguage.tunedModels.transferOwnership",
          "request": {
            "$ref": "TransferOwnershipRequest"
          }
        },
        "generateText": {
          "parameters": {
            "model": {
              "description": "Required. The name of the `Model` or `TunedModel` to use for generating the completion. Examples: models/text-bison-001 tunedModels/sentence-translator-u3b7m",
              "location": "path",
              "pattern": "^tunedModels/[^/]+$",
              "type": "string",
              "required": true
            }
          },
          "flatPath": "v1beta3/tunedModels/{tunedModelsId}:generateText",
          "parameterOrder": [
            "model"
          ],
          "id": "generativelanguage.tunedModels.generateText",
          "description": "Generates a response from the model given an input message.",
          "httpMethod": "POST",
          "response": {
            "$ref": "GenerateTextResponse"
          },
          "path": "v1beta3/{+model}:generateText",
          "request": {
            "$ref": "GenerateTextRequest"
          }
        },
        "get": {
          "response": {
            "$ref": "TunedModel"
          },
          "id": "generativelanguage.tunedModels.get",
          "description": "Gets information about a specific TunedModel.",
          "path": "v1beta3/{+name}",
          "httpMethod": "GET",
          "parameterOrder": [
            "name"
          ],
          "parameters": {
            "name": {
              "type": "string",
              "required": true,
              "description": "Required. The resource name of the model. Format: `tunedModels/my-model-id`",
              "location": "path",
              "pattern": "^tunedModels/[^/]+$"
            }
          },
          "flatPath": "v1beta3/tunedModels/{tunedModelsId}"
        },
        "delete": {
          "httpMethod": "DELETE",
          "description": "Deletes a tuned model.",
          "parameters": {
            "name": {
              "required": true,
              "pattern": "^tunedModels/[^/]+$",
              "location": "path",
              "description": "Required. The resource name of the model. Format: `tunedModels/my-model-id`",
              "type": "string"
            }
          },
          "id": "generativelanguage.tunedModels.delete",
          "flatPath": "v1beta3/tunedModels/{tunedModelsId}",
          "response": {
            "$ref": "Empty"
          },
          "path": "v1beta3/{+name}",
          "parameterOrder": [
            "name"
          ]
        },
        "list": {
          "httpMethod": "GET",
          "parameterOrder": [],
          "response": {
            "$ref": "ListTunedModelsResponse"
          },
          "path": "v1beta3/tunedModels",
          "flatPath": "v1beta3/tunedModels",
          "description": "Lists tuned models owned by the user.",
          "parameters": {
            "pageToken": {
              "description": "Optional. A page token, received from a previous `ListTunedModels` call. Provide the `page_token` returned by one request as an argument to the next request to retrieve the next page. When paginating, all other parameters provided to `ListTunedModels` must match the call that provided the page token.",
              "location": "query",
              "type": "string"
            },
            "filter": {
              "description": "Optional. A filter is a full text search over the tuned model's description and display name. By default, results will not include tuned models shared with everyone. Additional operators: - owner:me - writers:me - readers:me - readers:everyone Examples: \"owner:me\" returns all tuned models to which caller has owner role \"readers:me\" returns all tuned models to which caller has reader role \"readers:everyone\" returns all tuned models that are shared with everyone",
              "type": "string",
              "location": "query"
            },
            "pageSize": {
              "type": "integer",
              "description": "Optional. The maximum number of `TunedModels` to return (per page). The service may return fewer tuned models. If unspecified, at most 10 tuned models will be returned. This method returns at most 1000 models per page, even if you pass a larger page_size.",
              "location": "query",
              "format": "int32"
            }
          },
          "id": "generativelanguage.tunedModels.list"
        },
        "patch": {
          "httpMethod": "PATCH",
          "parameterOrder": [
            "name"
          ],
          "description": "Updates a tuned model.",
          "parameters": {
            "updateMask": {
              "format": "google-fieldmask",
              "type": "string",
              "description": "Required. The list of fields to update.",
              "location": "query"
            },
            "name": {
              "description": "Output only. The tuned model name. A unique name will be generated on create. Example: `tunedModels/az2mb0bpw6i` If display_name is set on create, the id portion of the name will be set by concatenating the words of the display_name with hyphens and adding a random portion for uniqueness. Example: display_name = \"Sentence Translator\" name = \"tunedModels/sentence-translator-u3b7m\"",
              "pattern": "^tunedModels/[^/]+$",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "id": "generativelanguage.tunedModels.patch",
          "path": "v1beta3/{+name}",
          "flatPath": "v1beta3/tunedModels/{tunedModelsId}",
          "response": {
            "$ref": "TunedModel"
          },
          "request": {
            "$ref": "TunedModel"
          }
        }
      }
    },
    "models": {
      "methods": {
        "generateMessage": {
          "response": {
            "$ref": "GenerateMessageResponse"
          },
          "parameterOrder": [
            "model"
          ],
          "description": "Generates a response from the model given an input `MessagePrompt`.",
          "parameters": {
            "model": {
              "pattern": "^models/[^/]+$",
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Required. The name of the model to use. Format: `name=models/{model}`."
            }
          },
          "request": {
            "$ref": "GenerateMessageRequest"
          },
          "path": "v1beta3/{+model}:generateMessage",
          "httpMethod": "POST",
          "flatPath": "v1beta3/models/{modelsId}:generateMessage",
          "id": "generativelanguage.models.generateMessage"
        },
        "get": {
          "parameterOrder": [
            "name"
          ],
          "response": {
            "$ref": "Model"
          },
          "flatPath": "v1beta3/models/{modelsId}",
          "parameters": {
            "name": {
              "description": "Required. The resource name of the model. This name should match a model name returned by the `ListModels` method. Format: `models/{model}`",
              "location": "path",
              "pattern": "^models/[^/]+$",
              "required": true,
              "type": "string"
            }
          },
          "path": "v1beta3/{+name}",
          "description": "Gets information about a specific Model.",
          "httpMethod": "GET",
          "id": "generativelanguage.models.get"
        },
        "countMessageTokens": {
          "parameterOrder": [
            "model"
          ],
          "request": {
            "$ref": "CountMessageTokensRequest"
          },
          "path": "v1beta3/{+model}:countMessageTokens",
          "flatPath": "v1beta3/models/{modelsId}:countMessageTokens",
          "response": {
            "$ref": "CountMessageTokensResponse"
          },
          "parameters": {
            "model": {
              "required": true,
              "type": "string",
              "pattern": "^models/[^/]+$",
              "description": "Required. The model's resource name. This serves as an ID for the Model to use. This name should match a model name returned by the `ListModels` method. Format: `models/{model}`",
              "location": "path"
            }
          },
          "id": "generativelanguage.models.countMessageTokens",
          "httpMethod": "POST",
          "description": "Runs a model's tokenizer on a string and returns the token count."
        },
        "list": {
          "id": "generativelanguage.models.list",
          "flatPath": "v1beta3/models",
          "description": "Lists models available through the API.",
          "parameters": {
            "pageToken": {
              "type": "string",
              "description": "A page token, received from a previous `ListModels` call. Provide the `page_token` returned by one request as an argument to the next request to retrieve the next page. When paginating, all other parameters provided to `ListModels` must match the call that provided the page token.",
              "location": "query"
            },
            "pageSize": {
              "type": "integer",
              "description": "The maximum number of `Models` to return (per page). The service may return fewer models. If unspecified, at most 50 models will be returned per page. This method returns at most 1000 models per page, even if you pass a larger page_size.",
              "location": "query",
              "format": "int32"
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [],
          "path": "v1beta3/models",
          "response": {
            "$ref": "ListModelsResponse"
          }
        },
        "embedText": {
          "httpMethod": "POST",
          "id": "generativelanguage.models.embedText",
          "response": {
            "$ref": "EmbedTextResponse"
          },
          "description": "Generates an embedding from the model given an input message.",
          "flatPath": "v1beta3/models/{modelsId}:embedText",
          "parameterOrder": [
            "model"
          ],
          "path": "v1beta3/{+model}:embedText",
          "parameters": {
            "model": {
              "required": true,
              "location": "path",
              "pattern": "^models/[^/]+$",
              "description": "Required. The model name to use with the format model=models/{model}.",
              "type": "string"
            }
          },
          "request": {
            "$ref": "EmbedTextRequest"
          }
        },
        "batchEmbedText": {
          "flatPath": "v1beta3/models/{modelsId}:batchEmbedText",
          "parameters": {
            "model": {
              "location": "path",
              "description": "Required. The name of the `Model` to use for generating the embedding. Examples: models/embedding-gecko-001",
              "pattern": "^models/[^/]+$",
              "required": true,
              "type": "string"
            }
          },
          "response": {
            "$ref": "BatchEmbedTextResponse"
          },
          "parameterOrder": [
            "model"
          ],
          "httpMethod": "POST",
          "request": {
            "$ref": "BatchEmbedTextRequest"
          },
          "id": "generativelanguage.models.batchEmbedText",
          "description": "Generates multiple embeddings from the model given input text in a synchronous call.",
          "path": "v1beta3/{+model}:batchEmbedText"
        },
        "generateText": {
          "parameters": {
            "model": {
              "required": true,
              "description": "Required. The name of the `Model` or `TunedModel` to use for generating the completion. Examples: models/text-bison-001 tunedModels/sentence-translator-u3b7m",
              "location": "path",
              "pattern": "^models/[^/]+$",
              "type": "string"
            }
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "GenerateTextRequest"
          },
          "path": "v1beta3/{+model}:generateText",
          "id": "generativelanguage.models.generateText",
          "description": "Generates a response from the model given an input message.",
          "flatPath": "v1beta3/models/{modelsId}:generateText",
          "response": {
            "$ref": "GenerateTextResponse"
          },
          "parameterOrder": [
            "model"
          ]
        },
        "countTextTokens": {
          "path": "v1beta3/{+model}:countTextTokens",
          "flatPath": "v1beta3/models/{modelsId}:countTextTokens",
          "response": {
            "$ref": "CountTextTokensResponse"
          },
          "parameterOrder": [
            "model"
          ],
          "request": {
            "$ref": "CountTextTokensRequest"
          },
          "id": "generativelanguage.models.countTextTokens",
          "parameters": {
            "model": {
              "type": "string",
              "pattern": "^models/[^/]+$",
              "required": true,
              "location": "path",
              "description": "Required. The model's resource name. This serves as an ID for the Model to use. This name should match a model name returned by the `ListModels` method. Format: `models/{model}`"
            }
          },
          "description": "Runs a model's tokenizer on a text and returns the token count.",
          "httpMethod": "POST"
        }
      }
    }
  },
  "id": "generativelanguage:v1beta3"
}
