// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation

/// Hyperparameters controlling the tuning process.
public struct Hyperparameters: Codable {
  /// Immutable. The batch size hyperparameter for tuning. If not set, a default of 16 or 64 will be used based on the number of training examples.
  public var batchSize: Int32?
  /// Immutable. The learning rate hyperparameter for tuning. If not set, a default of 0.0002 or 0.002 will be calculated based on the number of training examples.
  public var learningRate: Float?
  /// Immutable. The number of training epochs. An epoch is one pass through the training data. If not set, a default of 10 will be used.
  public var epochCount: Int32?

  public init(batchSize: Int32? = nil, learningRate: Float? = nil, epochCount: Int32? = nil) {
    self.batchSize = batchSize
    self.learningRate = learningRate
    self.epochCount = epochCount
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.batchSize = try values.decodeIfPresent(Int32.self, forKey: "batchSize")
    self.learningRate = try values.decodeIfPresent(Float.self, forKey: "learningRate")
    self.epochCount = try values.decodeIfPresent(Int32.self, forKey: "epochCount")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(batchSize, forKey: "batchSize")
    try values.encodeIfPresent(learningRate, forKey: "learningRate")
    try values.encodeIfPresent(epochCount, forKey: "epochCount")
  }
}
