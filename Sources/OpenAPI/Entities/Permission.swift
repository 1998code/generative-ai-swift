// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation

/// Permission resource grants user, group or the rest of the world access to the PaLM API resource (e.g. a tuned model, file). A role is a collection of permitted operations that allows users to perform specific actions on PaLM API resources. To make them available to users, groups, or service accounts, you assign roles. When you assign a role, you grant permissions that the role contains. There are three concentric roles. Each role is a superset of the previous role's permitted operations: - reader can use the resource (e.g. tuned model) for inference - writer has reader's permissions and additionally can edit and share - owner has writer's permissions and additionally can delete
public struct Permission: Codable {
  /// Output only. The permission name. A unique name will be generated on create. Example: tunedModels/{tuned_model}permssions/{permission} Output only.
  public var name: String?
  /// Optional. Immutable. The email address of the user of group which this permission refers. Field is not set when permission's grantee type is EVERYONE.
  public var emailAddress: String?
  /// Required. Immutable. The type of the grantee.
  public var granteeType: GranteeType?
  /// Required. The role granted by this permission.
  public var role: Role?

  /// Required. Immutable. The type of the grantee.
  public enum GranteeType: String, Codable, CaseIterable {
    case granteeTypeUnspecified = "GRANTEE_TYPE_UNSPECIFIED"
    case user = "USER"
    case group = "GROUP"
    case everyone = "EVERYONE"
  }

  /// Required. The role granted by this permission.
  public enum Role: String, Codable, CaseIterable {
    case roleUnspecified = "ROLE_UNSPECIFIED"
    case owner = "OWNER"
    case writer = "WRITER"
    case reader = "READER"
  }

  public init(name: String? = nil, emailAddress: String? = nil, granteeType: GranteeType? = nil, role: Role? = nil) {
    self.name = name
    self.emailAddress = emailAddress
    self.granteeType = granteeType
    self.role = role
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.name = try values.decodeIfPresent(String.self, forKey: "name")
    self.emailAddress = try values.decodeIfPresent(String.self, forKey: "emailAddress")
    self.granteeType = try values.decodeIfPresent(GranteeType.self, forKey: "granteeType")
    self.role = try values.decodeIfPresent(Role.self, forKey: "role")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(name, forKey: "name")
    try values.encodeIfPresent(emailAddress, forKey: "emailAddress")
    try values.encodeIfPresent(granteeType, forKey: "granteeType")
    try values.encodeIfPresent(role, forKey: "role")
  }
}
