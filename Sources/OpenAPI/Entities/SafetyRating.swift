// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation

/// Safety rating for a piece of content. The safety rating contains the category of harm and the harm probability level in that category for a piece of content. Content is classified for safety across a number of harm categories and the probability of the harm classification is included here.
public struct SafetyRating: Codable {
  /// Required. The category for this rating.
  public var category: Category?
  /// Required. The probability of harm for this content.
  public var probability: Probability?

  /// Required. The category for this rating.
  public enum Category: String, Codable, CaseIterable {
    case harmCategoryUnspecified = "HARM_CATEGORY_UNSPECIFIED"
    case harmCategoryDerogatory = "HARM_CATEGORY_DEROGATORY"
    case harmCategoryToxicity = "HARM_CATEGORY_TOXICITY"
    case harmCategoryViolence = "HARM_CATEGORY_VIOLENCE"
    case harmCategorySexual = "HARM_CATEGORY_SEXUAL"
    case harmCategoryMedical = "HARM_CATEGORY_MEDICAL"
    case harmCategoryDangerous = "HARM_CATEGORY_DANGEROUS"
  }

  /// Required. The probability of harm for this content.
  public enum Probability: String, Codable, CaseIterable {
    case harmProbabilityUnspecified = "HARM_PROBABILITY_UNSPECIFIED"
    case negligible = "NEGLIGIBLE"
    case low = "LOW"
    case medium = "MEDIUM"
    case high = "HIGH"
  }

  public init(category: Category? = nil, probability: Probability? = nil) {
    self.category = category
    self.probability = probability
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.category = try values.decodeIfPresent(Category.self, forKey: "category")
    self.probability = try values.decodeIfPresent(Probability.self, forKey: "probability")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(category, forKey: "category")
    try values.encodeIfPresent(probability, forKey: "probability")
  }
}
