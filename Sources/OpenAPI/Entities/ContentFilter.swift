// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation

/// Content filtering metadata associated with processing a single request. ContentFilter contains a reason and an optional supporting string. The reason may be unspecified.
public struct ContentFilter: Codable {
  /// A string that describes the filtering behavior in more detail.
  public var message: String?
  /// The reason content was blocked during request processing.
  public var reason: Reason?

  /// The reason content was blocked during request processing.
  public enum Reason: String, Codable, CaseIterable {
    case blockedReasonUnspecified = "BLOCKED_REASON_UNSPECIFIED"
    case safety = "SAFETY"
    case other = "OTHER"
  }

  public init(message: String? = nil, reason: Reason? = nil) {
    self.message = message
    self.reason = reason
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.message = try values.decodeIfPresent(String.self, forKey: "message")
    self.reason = try values.decodeIfPresent(Reason.self, forKey: "reason")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(message, forKey: "message")
    try values.encodeIfPresent(reason, forKey: "reason")
  }
}
