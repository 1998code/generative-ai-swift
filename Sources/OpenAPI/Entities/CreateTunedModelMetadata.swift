// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation

/// Metadata about the state and progress of creating a tuned model returned from the long-running operation
public struct CreateTunedModelMetadata: Codable {
  /// Name of the tuned model associated with the tuning operation.
  public var tunedModel: String?
  /// The number of steps completed.
  public var completedSteps: Int32?
  /// The completed percentage for the tuning operation.
  public var completedPercent: Float?
  /// The total number of tuning steps.
  public var totalSteps: Int32?
  /// Metrics collected during tuning.
  public var snapshots: [TuningSnapshot]?

  public init(tunedModel: String? = nil, completedSteps: Int32? = nil, completedPercent: Float? = nil, totalSteps: Int32? = nil, snapshots: [TuningSnapshot]? = nil) {
    self.tunedModel = tunedModel
    self.completedSteps = completedSteps
    self.completedPercent = completedPercent
    self.totalSteps = totalSteps
    self.snapshots = snapshots
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.tunedModel = try values.decodeIfPresent(String.self, forKey: "tunedModel")
    self.completedSteps = try values.decodeIfPresent(Int32.self, forKey: "completedSteps")
    self.completedPercent = try values.decodeIfPresent(Float.self, forKey: "completedPercent")
    self.totalSteps = try values.decodeIfPresent(Int32.self, forKey: "totalSteps")
    self.snapshots = try values.decodeIfPresent([TuningSnapshot].self, forKey: "snapshots")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(tunedModel, forKey: "tunedModel")
    try values.encodeIfPresent(completedSteps, forKey: "completedSteps")
    try values.encodeIfPresent(completedPercent, forKey: "completedPercent")
    try values.encodeIfPresent(totalSteps, forKey: "totalSteps")
    try values.encodeIfPresent(snapshots, forKey: "snapshots")
  }
}
